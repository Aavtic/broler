// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: broler_grpc.proto

package broler_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Broler_PageInfo_FullMethodName       = "/broler.Broler/PageInfo"
	Broler_ClientRequests_FullMethodName = "/broler.Broler/ClientRequests"
)

// BrolerClient is the client API for Broler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrolerClient interface {
	PageInfo(ctx context.Context, in *PagesInfoReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Pages], error)
	ClientRequests(ctx context.Context, in *ClientReq, opts ...grpc.CallOption) (*ServerResponse, error)
}

type brolerClient struct {
	cc grpc.ClientConnInterface
}

func NewBrolerClient(cc grpc.ClientConnInterface) BrolerClient {
	return &brolerClient{cc}
}

func (c *brolerClient) PageInfo(ctx context.Context, in *PagesInfoReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Pages], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Broler_ServiceDesc.Streams[0], Broler_PageInfo_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PagesInfoReq, Pages]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Broler_PageInfoClient = grpc.ServerStreamingClient[Pages]

func (c *brolerClient) ClientRequests(ctx context.Context, in *ClientReq, opts ...grpc.CallOption) (*ServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, Broler_ClientRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrolerServer is the server API for Broler service.
// All implementations must embed UnimplementedBrolerServer
// for forward compatibility.
type BrolerServer interface {
	PageInfo(*PagesInfoReq, grpc.ServerStreamingServer[Pages]) error
	ClientRequests(context.Context, *ClientReq) (*ServerResponse, error)
	mustEmbedUnimplementedBrolerServer()
}

// UnimplementedBrolerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBrolerServer struct{}

func (UnimplementedBrolerServer) PageInfo(*PagesInfoReq, grpc.ServerStreamingServer[Pages]) error {
	return status.Errorf(codes.Unimplemented, "method PageInfo not implemented")
}
func (UnimplementedBrolerServer) ClientRequests(context.Context, *ClientReq) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientRequests not implemented")
}
func (UnimplementedBrolerServer) mustEmbedUnimplementedBrolerServer() {}
func (UnimplementedBrolerServer) testEmbeddedByValue()                {}

// UnsafeBrolerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrolerServer will
// result in compilation errors.
type UnsafeBrolerServer interface {
	mustEmbedUnimplementedBrolerServer()
}

func RegisterBrolerServer(s grpc.ServiceRegistrar, srv BrolerServer) {
	// If the following call pancis, it indicates UnimplementedBrolerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Broler_ServiceDesc, srv)
}

func _Broler_PageInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PagesInfoReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BrolerServer).PageInfo(m, &grpc.GenericServerStream[PagesInfoReq, Pages]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Broler_PageInfoServer = grpc.ServerStreamingServer[Pages]

func _Broler_ClientRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrolerServer).ClientRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Broler_ClientRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrolerServer).ClientRequests(ctx, req.(*ClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Broler_ServiceDesc is the grpc.ServiceDesc for Broler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Broler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "broler.Broler",
	HandlerType: (*BrolerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientRequests",
			Handler:    _Broler_ClientRequests_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PageInfo",
			Handler:       _Broler_PageInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "broler_grpc.proto",
}
